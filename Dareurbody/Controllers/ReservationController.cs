using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Dareurbody.Models;
/* 
'   This code was generated by Gamal
'   Date: 23-3-2019
'   ver: No.1
'   Description: Reservation 
*/
namespace Dareurbody.Controllers
{
    public class ReservationController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: /Reservation/
        public ActionResult Index()
        {
            return View(db.Reservations.ToList());
        }

       
        // GET: /Reservation/Create
        public ActionResult Create()
        {
            //to set Request_sub_time as current Time in form
            Reservation reservation = new Reservation();
            reservation.Request_sub_time = DateTime.Now;

            return View(reservation);
        }
      

        // POST: /Reservation/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "id,emp_id,start_date,end_time,Duration,Request_sub_time")] Reservation reservation)
        {
            //check before compare
            var count = 0;
            foreach (var check in db.Reservations)
            {
                count++;
            }
            if (count != 0)
            {
                foreach (var item in db.Reservations)
                    if (ModelState.IsValid)
                    {
                        //to insure it's a valid date
                        if (reservation.start_date >= DateTime.Now)
                        {
                            reservation.Request_sub_time = DateTime.Now;
                            reservation.end_time = reservation.start_date.AddHours(reservation.Duration);
                            //to insure the reservation in the office hours
                            if (reservation.start_date.Hour >= 9 && reservation.start_date.Hour <= 17 && reservation.end_time.Hour <= 18)
                            {
                                //to prevent dublicate
                                if ((reservation.start_date >= item.start_date && reservation.start_date < item.end_time) || (reservation.start_date <= item.start_date && reservation.end_time >= item.end_time) || (reservation.end_time > item.start_date && reservation.end_time < item.end_time))
                                {
                                    return Content("<script language='javascript' type='text/javascript'>alert('This Appointment is already Reserved');</script>");
                                }
                                else
                                {
                                    db.Reservations.Add(reservation);
                                    db.SaveChanges();
                                    return RedirectToAction("Index");
                                }
                            }
                            else
                            {
                                ViewBag.Notic = "out of office hours";
                            }
                        }

                        else
                        {
                            return Content("<script language='javascript' type='text/javascript'>alert('Start time must be after current time');</script>");
                        }

                    }
            }
            else
            {
                reservation.Request_sub_time = DateTime.Now;
                reservation.end_time = reservation.start_date.AddHours(reservation.Duration);
                db.Reservations.Add(reservation);
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(reservation);
            
        }
      
   
        // GET: /Reservation/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Reservation reservation = db.Reservations.Find(id);
            if (reservation == null)
            {
                return HttpNotFound();
            }
            return View(reservation);
        }

        // POST: /Reservation/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Reservation reservation = db.Reservations.Find(id);
            db.Reservations.Remove(reservation);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
